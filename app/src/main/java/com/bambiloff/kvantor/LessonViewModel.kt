package com.bambiloff.kvantor

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.SetOptions
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await

/**
 * ViewModel, —â–æ –ø—Ä–∞—Ü—é—î —è–∫ –¥–ª—è Python-–∫—É—Ä—Å—É, —Ç–∞–∫ —ñ –¥–ª—è JavaScript-–∫—É—Ä—Å—É.
 * –ù–∞–∑–≤–∞ –∫—É—Ä—Å—É –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ (`courseType`).
 *
 *  ‚Äì "python"      ‚Üí —á–∏—Ç–∞—î –∫–æ–ª–µ–∫—Ü—ñ—é "modules"
 *  ‚Äì "javascript"  ‚Üí —á–∏—Ç–∞—î –∫–æ–ª–µ–∫—Ü—ñ—é "modules_js"
 *
 * –ü—Ä–æ–≥—Ä–µ—Å –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –ø–æ–ª—ñ `progress.{courseType}` —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 */
class LessonViewModel(
    private val courseType: String = "python"   // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äì Python
) : ViewModel() {

    /* ---------------- Firebase ---------------- */
    private val db   = FirebaseFirestore.getInstance()
    private val auth = FirebaseAuth.getInstance()

    /* ---------------- State ---------------- */
    private val _modules = MutableStateFlow<List<Module>>(emptyList())
    val modules: StateFlow<List<Module>> = _modules

    private val _currentModuleIndex = MutableStateFlow(0)
    val currentModuleIndex: StateFlow<Int> = _currentModuleIndex

    private val _currentPageIndex = MutableStateFlow(0)
    val currentPageIndex: StateFlow<Int> = _currentPageIndex

    val currentModule =
        combine(_modules, _currentModuleIndex) { list, idx -> list.getOrNull(idx) }
            .stateIn(viewModelScope, kotlinx.coroutines.flow.SharingStarted.Eagerly, null)

    /* ------------------------------------------------------------------------ */
    /** –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥—É–ª—ñ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å—É —ñ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–Ω–æ–≤–ª—é—î –ø—Ä–æ–≥—Ä–µ—Å. */
    fun loadModules() {
        viewModelScope.launch {
            val collection = when (courseType) {
                "javascript" -> "modules_js"
                else          -> "modules"           // python
            }

            try {
                val snapshot = db.collection(collection).get().await()
                val loaded   = snapshot.documents
                    .mapNotNull { it.toObject(ModuleDto::class.java)?.toModule() }
                    .sortedBy { it.id }

                _modules.value = loaded
                restoreProgress()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    /* ------------------------------------------------------------------------ */
    /** –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firestore –≤ progress.{courseType}. */
    private fun saveProgress() {
        val user = auth.currentUser ?: return

        val progressData = mapOf(
            "moduleIndex" to _currentModuleIndex.value,
            "pageIndex"   to _currentPageIndex.value
        )

        val data = mapOf(
            "progress" to mapOf(courseType to progressData)
        )

        db.collection("users")
            .document(user.uid)
            .set(data, SetOptions.merge())
            .addOnFailureListener { e -> println("‚ùå Save error: ${e.message}") }
    }

    /* ------------------------------------------------------------------------ */
    /** –í—ñ–¥–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ progress.{courseType}. */
    private fun restoreProgress() {
        val user = auth.currentUser ?: return
        viewModelScope.launch {
            try {
                val doc = db.collection("users").document(user.uid).get().await()

                @Suppress("UNCHECKED_CAST")
                val progressRoot = doc.get("progress") as? Map<String, Map<String, Long>>
                val thisCourse   = progressRoot?.get(courseType)

                val mIdx = (thisCourse?.get("moduleIndex") ?: 0L).toInt()
                val pIdx = (thisCourse?.get("pageIndex")   ?: 0L).toInt()

                // clamp module index
                val maxModule = _modules.value.lastIndex.coerceAtLeast(0)
                _currentModuleIndex.value = mIdx.coerceIn(0, maxModule)

                // clamp page index
                val pageCount = _modules.value.getOrNull(_currentModuleIndex.value)?.pages?.size ?: 1
                val maxPage   = (pageCount - 1).coerceAtLeast(0)
                _currentPageIndex.value = pIdx.coerceIn(0, maxPage)

                println("üì• Progress restored ($courseType): module=$mIdx page=$pIdx")
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    /* ------------------------------------------------------------------------ */
    /** –ü–æ–∑–Ω–∞—á–∞—î –º–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–º —ñ –æ–Ω–æ–≤–ª—é—î –ø–æ–ª–µ completedModules. */

    @Suppress("UNCHECKED_CAST")
    private fun markModuleCompleted(moduleId: String) {
        val user = auth.currentUser ?: return
        val ref  = db.collection("users").document(user.uid)

        db.runTransaction { tx ->
            val done = tx.get(ref).get("completedModules") as? List<String> ?: emptyList()
            if (moduleId !in done) tx.update(ref, "completedModules", done + moduleId)
        }.addOnSuccessListener {
            println("‚úÖ Module completed: $moduleId ($courseType)")
        }
    }

    /* ------------------------------------------------------------------------ */
    /**
     * –ö–Ω–æ–ø–∫–∞ ¬´–î–∞–ª—ñ¬ª:
     *  ‚Äì –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —è–∫—â–æ —â–µ —î;
     *  ‚Äì —ñ–Ω–∞–∫—à–µ –ø–æ–∑–Ω–∞—á–∞—î –º–æ–¥—É–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–º —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–æ–¥—É–ª—è.
     *  –ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è.
     */
    fun next() {
        val mod = currentModule.value ?: return

        if (_currentPageIndex.value < mod.pages.lastIndex) {
            _currentPageIndex.value += 1
        } else {
            markModuleCompleted(mod.id)
            if (_currentModuleIndex.value < _modules.value.lastIndex) {
                _currentModuleIndex.value += 1
                _currentPageIndex.value = 0
            }
        }
        saveProgress()
    }
}