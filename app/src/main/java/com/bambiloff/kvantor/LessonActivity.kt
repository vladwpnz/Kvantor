package com.bambiloff.kvantor

import android.annotation.SuppressLint
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.fadeIn
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Code
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Lightbulb
import androidx.compose.material.icons.filled.MonetizationOn
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewmodel.compose.viewModel
import com.bambiloff.kvantor.ui.*
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.flow.collectLatest

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Activity ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
class LessonActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val courseType = intent.getStringExtra("courseType") ?: "python"
        val uid        = FirebaseAuth.getInstance().currentUser?.uid ?: return

        val factory = object : ViewModelProvider.Factory {
            @Suppress("UNCHECKED_CAST")
            override fun <T : ViewModel> create(modelClass: Class<T>): T =
                LessonViewModel(courseType).apply { loadModules() } as T
        }

        setContent {
            val vm: LessonViewModel = viewModel(factory = factory)
            LessonScreen(
                viewModel    = vm,
                courseType   = courseType,
                uid          = uid,
                onBackToMenu = { finish() }
            )
        }
    }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ï–∫—Ä–∞–Ω –∑ –º–æ–¥—É–ª—è–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
@SuppressLint("DefaultLocale")
@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)
@Composable
fun LessonScreen(
    viewModel: LessonViewModel,
    courseType: String,
    uid: String,
    onBackToMenu: () -> Unit
) {
    /* ----------- —Å—Ç–∞–Ω–∏ ------------- */
    val modules        by viewModel.modules.collectAsState()
    val currentModIdx  by viewModel.currentModuleIndex.collectAsState()
    val currentPageIdx by viewModel.currentPageIndex.collectAsState()

    val lives          by viewModel.lives.collectAsState()
    val hints          by viewModel.hints.collectAsState()
    val coins          by viewModel.coins.collectAsState()
    val showHint       by viewModel.showHint.collectAsState()
    val timeLeft   by viewModel.timeToNextLife.collectAsState()

    val livesLabel = if (timeLeft > 0 && lives < 10)
        "$lives (${String.format("%02d:%02d", timeLeft/60, timeLeft%60)})"
    else "$lives"

    val snack = remember { SnackbarHostState() }


    /* –ª–æ–≤–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø–æ–¥—ñ—ó –≤—ñ–¥ VM */
    LaunchedEffect(Unit) {
        viewModel.events.collectLatest {
            when (it) {
                LessonViewModel.UiEvent.NoLives ->
                    snack.showSnackbar("–£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å –∂–∏—Ç—Ç—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")
                LessonViewModel.UiEvent.NoHints ->
                    snack.showSnackbar("–ü—ñ–¥–∫–∞–∑–æ–∫ –±—ñ–ª—å—à–µ –Ω–µ–º–∞")
                LessonViewModel.UiEvent.NoCoins ->      // ‚Üê –Ω–æ–≤–∞ –≥—ñ–ª–∫–∞
                    snack.showSnackbar("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            }
        }
    }

    /* ----------- –ø—Ä–æ–≥—Ä–µ—Å ------------- */
    val pageCount = modules.getOrNull(currentModIdx)?.pages?.size ?: 1
    val progress  = ((currentPageIdx + 1).coerceAtMost(pageCount)).toFloat() / pageCount

    Scaffold(
        snackbarHost = { SnackbarHost(snack) },

        /* ---- TOP ---- */
        topBar = {
            TopAppBar(
                title = { Text("Kvantor", color = KvTextColor) },
                actions = {
                    TextButton(
                        onClick = {
                            viewModel.saveProgress()   // ‚Üê –¥–æ–¥–∞–Ω–æ
                            onBackToMenu()
                        }
                    ) {
                        Text("–ú–µ–Ω—é", color = KvTextColor)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = KvBg)
            )
        },

        /* ---- BOTTOM ---- */
        bottomBar = {
            Column {
                /* —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –∑ –∂–∏—Ç—Ç—è/–ø—ñ–¥–∫–∞–∑–∫–∏/–º–æ–Ω–µ—Ç–∏ */
                Row(
                    Modifier
                        .fillMaxWidth()
                        .background(KvBg)
                        .padding(horizontal = 12.dp, vertical = 4.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    StatusChip(Icons.Default.Favorite,       livesLabel, "Lives")   // ‚Üê livesLabel
                    StatusChip(Icons.Default.Lightbulb,      hints.toString(),  "Hints")
                    StatusChip(Icons.Default.MonetizationOn, coins.toString(),  "Coins")
                }

                /* –ø—Ä–æ–≥—Ä–µ—Å */
                HorizontalDivider(color = KvAccent.copy(.3f), thickness = 1.dp)
                LinearProgressIndicator(
                    progress   = { progress },
                    modifier   = Modifier.fillMaxWidth().height(4.dp),
                    color      = KvAccent,
                    trackColor = KvAccent.copy(.1f)
                )
            }
        },
        containerColor = KvBg
    ) { padding ->
        PageContainer(Modifier.padding(padding)) {
            when {
                modules.isEmpty() -> Box(
                    Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) { CircularProgressIndicator(color = KvAccent) }

                currentModIdx < modules.size -> LessonModuleContent(
                    module       = modules[currentModIdx],
                    pageIndex    = currentPageIdx,
                    isLastModule = currentModIdx == modules.lastIndex,
                    courseType   = courseType,
                    uid          = uid,
                    vm           = viewModel,          // ‚Üê –ø–µ—Ä–µ–¥–∞—î–º–æ VM
                    onNext       = viewModel::next,
                    onBackToMenu = onBackToMenu
                )

                else -> CourseFinishedScreen(onBackToMenu)
            }

            /* –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –ø—ñ–¥ —É—Å—ñ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—è–∫ snackbar) */
            showHint?.let { hint ->
                LaunchedEffect(hint) {
                    snack.showSnackbar("üí° $hint")
                    viewModel.clearHint()
                }
            }
        }
    }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
@Composable
fun LessonModuleContent(
    module: Module,
    pageIndex: Int,
    isLastModule: Boolean,
    courseType: String,
    uid: String,
    vm: LessonViewModel,          // –æ—Ç—Ä–∏–º–∞–ª–∏
    onNext: () -> Unit,
    onBackToMenu: () -> Unit
) {
    val page = module.pages.getOrNull(pageIndex)
    var done by remember(pageIndex) { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        /* HERO-—ñ–∫–æ–Ω–∫–∞ */
        AnimatedVisibility(visible = true, enter = fadeIn()) {
            if (courseType == "javascript") {
                Icon(Icons.Filled.Code, null, tint = KvAccent, modifier = Modifier.size(72.dp))
            } else Text("üíª", fontSize = 64.sp)
        }

        Spacer(Modifier.height(16.dp))

        Text(
            text      = "–ú–æ–¥—É–ª—å: ${module.title}",
            style     = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
            color     = KvTextColor,
            textAlign = TextAlign.Center
        )
        Spacer(Modifier.height(32.dp))

        /* ‚Äî‚Äî‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ‚Äî‚Äî‚Äî */
        when (page) {
            is Page.Theory     -> Text(page.text, color = KvTextColor, textAlign = TextAlign.Center)
                .also { done = true }

            is Page.Test       -> TestPage(page, vm) { done = true }
            is Page.CodingTask -> CodingTaskView(page) { done = true }

            is Page.Final      -> {
                LaunchedEffect(uid, courseType) {
                    val achId = if (courseType == "python") "PY_MASTER" else "JS_SAMURAI"
                    AchievementManager.unlockAchievement(uid, achId)
                }

                Text(page.message, color = KvTextColor, textAlign = TextAlign.Center)
                done = true
                Spacer(Modifier.height(32.dp))
                KvantorButton(
                    text    = if (isLastModule) "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é" else "–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–æ–¥—É–ª—è",
                    onClick = if (isLastModule) onBackToMenu else onNext
                )
            }

            null -> {}
        }

        if (done && page !is Page.Final) {
            Spacer(Modifier.height(32.dp))
            KvantorButton("–î–∞–ª—ñ", onClick = onNext)
        }
    }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§—ñ–Ω–∞–ª—å–Ω–∏–π –µ–∫—Ä–∞–Ω ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
@Composable
fun CourseFinishedScreen(onBackToMenu: () -> Unit) {
    Column(
        Modifier.fillMaxSize(),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            "üéâ –í—ñ—Ç–∞—î–º–æ!\n–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ.",
            style     = MaterialTheme.typography.titleLarge,
            color     = KvTextColor,
            textAlign = TextAlign.Center
        )
        Spacer(Modifier.height(32.dp))
        KvantorButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é", onClick = onBackToMenu)
    }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°—Ç–æ—Ä—ñ–Ω–∫–∞-—Ç–µ—Å—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
@Composable
fun TestPage(
    test: Page.Test,
    vm: LessonViewModel,
    onDone: () -> Unit
) {
    var selected by remember(test) { mutableStateOf(-1) }
    var checked  by remember(test) { mutableStateOf(false) }

    Text(test.question, color = KvTextColor, textAlign = TextAlign.Center)
    Spacer(Modifier.height(24.dp))

    test.answers.forEachIndexed { idx, ans ->
        Row(verticalAlignment = Alignment.CenterVertically) {
            RadioButton(
                selected = selected == idx,
                onClick  = { selected = idx; checked = false },
                colors   = RadioButtonDefaults.colors(
                    selectedColor   = KvTextColor,
                    unselectedColor = KvTextColor
                )
            )
            Spacer(Modifier.width(8.dp))
            Text(ans, color = KvTextColor)
        }
    }

    /* ---- –ü–Ü–î–ö–ê–ó–ö–ê ---- */
    if (test.hint != null) {
        Spacer(Modifier.height(8.dp))
        KvantorButton(
            text    = "–ü—ñ–¥–∫–∞–∑–∫–∞ (${vm.hints.collectAsState().value})",
            enabled = vm.hints.collectAsState().value > 0,
            onClick = { vm.requestHint(test) }   // ‚Üê —è–≤–Ω–µ —ñ–º‚Äô—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        )
    }

    /* ---- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ---- */
    Spacer(Modifier.height(24.dp))
    KvantorButton(
        text    = "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
        enabled = selected != -1,
        onClick = {
            vm.checkAnswer(test, selected)
            checked = true
            onDone()
        }
    )

    /* ---- –†–µ–∑—É–ª—å—Ç–∞—Ç ---- */
    val correct = remember(checked) { selected == test.correctAnswerIndex }
    if (checked) {
        Spacer(Modifier.height(16.dp))
        Text(
            if (correct) "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ (+10‚Çµ)" else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (-1 ‚ù§Ô∏è)",
            color     = if (correct) KvAccent else KvAccent.copy(.7f),
            textAlign = TextAlign.Center
        )
    }
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–ø–æ–º—ñ–∂–Ω–µ: —Å—Ç–∞—Ç—É—Å-—á—ñ–ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
@Composable
private fun StatusChip(icon: ImageVector, valueText: String, label: String) = Row(
    verticalAlignment     = Alignment.CenterVertically,
    horizontalArrangement = Arrangement.spacedBy(4.dp)
) {
    Icon(icon, null, tint = KvAccent, modifier = Modifier.size(16.dp))
    Text(valueText, color = KvTextColor, fontSize = 14.sp)
    Text(label,      color = KvTextColor, fontSize = 12.sp)
}
