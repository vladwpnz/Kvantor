package com.bambiloff.kvantor

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import java.net.SocketTimeoutException    // <- —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∞–π–º–∞—É—Ç—É

/**
 * –û–∫—Ä–µ–º–∏–π Composable –¥–ª—è code-challenge –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ Ollama.
 *
 * @param task       ‚Äì –¥–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–æ–ø–∏—Å + –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –∫–æ–¥)
 * @param onSubmitted ‚Äì callback —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–∫—Ä–∞–Ω: true/false
 */
@Composable
fun CodingTaskView(
    task: Page.CodingTask,
    onSubmitted: (Boolean) -> Unit
) {
    val api       = remember { OllamaApi.create() }
    val coroutine = rememberCoroutineScope()

    // –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ —Ñ–æ–∫—É—Å—É
    val focusManager = LocalFocusManager.current
    val keyboardController = LocalSoftwareKeyboardController.current

    var userCode   by remember(task) { mutableStateOf("") }
    var submitted  by remember(task) { mutableStateOf(false) }
    var isCorrect  by remember(task) { mutableStateOf<Boolean?>(null) }
    var aiReview   by remember(task) { mutableStateOf<String?>(null) }
    var isLoading  by remember(task) { mutableStateOf(false) }
    var error      by remember(task) { mutableStateOf<String?>(null) }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp)
    ) {
        Text("–ó–∞–≤–¥–∞–Ω–Ω—è: ${task.description}")
        Spacer(Modifier.height(8.dp))

        OutlinedTextField(
            value = userCode,
            onValueChange = { userCode = it },
            label = { Text("–í–∞—à –∫–æ–¥") },
            modifier = Modifier
                .fillMaxWidth()
                .height(150.dp)
        )

        Spacer(Modifier.height(8.dp))

        Button(
            onClick = {
                // —Ö–æ–≤–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ –≤—Ç—Ä–∞—á–∞—î–º–æ —Ñ–æ–∫—É—Å
                focusManager.clearFocus()
                keyboardController?.hide()

                // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å
                submitted = true
                isCorrect = userCode.trim() == task.expectedCode.trim()
                onSubmitted(isCorrect == true)

                // –≥–æ—Ç—É—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç
                aiReview = null
                error = null

                coroutine.launch {
                    isLoading = true
                    try {
                        val request = CodeReviewRequest(
                            task = task.description,
                            code = userCode
                        )
                        val response = api.reviewCode(request)
                        aiReview = response.response

                    } catch (e: SocketTimeoutException) {
                        // –æ–∫—Ä–µ–º–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–∞–π–º–∞—É—Ç—É
                        error = "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç: AI-—Ä–µ–≤'—é –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                    } catch (e: Exception) {
                        // –≤—Å—ñ —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏
                        error = "‚ùó –ü–æ–º–∏–ª–∫–∞ AI-—Ä–µ–≤'—é: ${e.localizedMessage}"
                    } finally {
                        isLoading = false
                    }
                }
            },
            enabled = userCode.isNotBlank() && (!isLoading)
        ) {
            Text("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏")
        }

        Spacer(Modifier.height(16.dp))

        if (submitted) {
            if (isCorrect == true) {
                Text("‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ!", color = MaterialTheme.colorScheme.primary)
            } else {
                Text(
                    buildString {
                        append("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n")
                        append("–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: ${task.expectedCode}")
                    },
                    color = MaterialTheme.colorScheme.error
                )
            }
        }

        Spacer(Modifier.height(24.dp))

        if (isLoading) {
            CircularProgressIndicator()
        } else {
            aiReview?.let {
                Text(
                    "üß† AI-—Ä–µ—Ü–µ–Ω–∑—ñ—è:\n$it",
                    color = MaterialTheme.colorScheme.secondary
                )
            }
        }

        error?.let {
            Spacer(Modifier.height(8.dp))
            Text(it, color = MaterialTheme.colorScheme.error)
        }
    }
}