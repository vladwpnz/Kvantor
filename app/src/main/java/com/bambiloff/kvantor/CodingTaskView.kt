package com.bambiloff.kvantor

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

/**
 * –û–∫—Ä–µ–º–∏–π Composable –¥–ª—è code‚Äëchallenge.
 *
 * @param task       ‚Äì¬†–¥–∞–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–æ–ø–∏—Å + –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –∫–æ–¥)
 * @param onResult   ‚Äì¬†callback —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–∫—Ä–∞–Ω: true¬†‚Üî¬†–∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
 */
@Composable
fun CodingTaskView(
    task: Page.CodingTask,
    onSubmitted: (Boolean) -> Unit      // true / false –ø–æ–∫–∏ –Ω–µ –≤–∞–∂–ª–∏–≤–æ
) {
    /* üî∏ ‚Ää—É—Å—ñ —Å—Ç–∞–Ω–∏¬†‚Äî¬†key¬†=¬†task (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏),
           —Ç–æ–º—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤–æ–Ω–∏ —Å—Ç–∏—Ä–∞—é—Ç—å—Å—è */
    var userCode   by remember(task) { mutableStateOf("") }
    var submitted  by remember(task) { mutableStateOf(false) }
    var isCorrect  by remember(task) { mutableStateOf<Boolean?>(null) } // null¬†=¬†—â–µ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–∏

    Text("–ó–∞–≤–¥–∞–Ω–Ω—è: ${task.description}")
    Spacer(Modifier.height(8.dp))

    OutlinedTextField(
        value = userCode,
        onValueChange = { userCode = it },
        label = { Text("–í–∞—à –∫–æ–¥") },
        modifier = Modifier
            .fillMaxWidth()
            .height(150.dp)
    )

    Spacer(Modifier.height(8.dp))

    Button(
        onClick = {
            submitted = true
            isCorrect = userCode.trim() == task.expectedCode.trim()
            onSubmitted(true)                 // –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –µ–∫—Ä–∞–Ω ‚Üí –∑‚Äô—è–≤–∏—Ç—å—Å—è ¬´–î–∞–ª—ñ¬ª
        },
        enabled = userCode.isNotBlank()       // —â–æ—Å—å –Ω–∞–ø–∏—Å–∞–Ω–æ
                && (!submitted || isCorrect == false)  // –º–æ–∂–Ω–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
    ) { Text("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏") }

    if (submitted) {
        if (isCorrect == true) {
            Text("‚úÖ¬†–í—Å–µ –≤—ñ—Ä–Ω–æ!")
        } else {
            Text(
                buildString {
                    append("‚ùå¬†–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n")
                    append("–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å: ${task.expectedCode}")
                }
            )
        }
    }

    /*  üî∏¬†AI‚Äëreview –ø–æ–∫–∏ –∑–∞–ª–∏—à–∞—î–º–æ –∑–∞–≥–ª—É—à–∫–æ—é¬†*/
    Spacer(Modifier.height(8.dp))
    Text("üß†¬†AI Review (–∑–∞–≥–ª—É—à–∫–∞): ${task.codeReviewPlaceholder}")
}

